package command;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.text.BadLocationException;

import main.StaticUtilities;
import tab.Tab;
import tab.TabContentTextBuffer;

public class KeyPressedCommand implements CommandInterface, KeyListener {

    /**
     * Tab Buffer that will be observed for key inputs
     */
    private Tab parent;
    
    /**
     * Observes a tab buffer to look for specific key inputs
     * @param tabContentBuffer = tab buffer to observe
     * */
    public KeyPressedCommand(Tab parent){
        this.parent = parent;
    }
    
    @Override
    public void keyPressed(KeyEvent e) {
    }

    @Override
    public void keyReleased(KeyEvent e) {
    	
    }

    @Override
    public void keyTyped(KeyEvent e) {
    	
        TabContentTextBuffer tabContentBuffer = parent.getContent().getBuffer();
        
    	int startIndex = tabContentBuffer.getCaretPosition();
    	int endIndex;
    	
        if(e.getKeyChar() == '\t'){
            //If tab key is hit
            try{
                //Removed inserted tab character
                tabContentBuffer.getDocument().remove( tabContentBuffer.getCaretPosition() - 1 , 1 );
                //Insert tab spaces
                tabContentBuffer.insert( StaticUtilities.getTab() ,tabContentBuffer.getCaretPosition());
            }catch (BadLocationException e2){}
        }else if (e.getKeyChar() == '\n' && StaticUtilities.getAutoIndent()){
            //If enter key is hit
            //Auto Indent
            tabContentBuffer.insert(StaticUtilities.spaces( getLastLineIndentation(tabContentBuffer) ),tabContentBuffer.getCaretPosition());
        }
        
        endIndex = tabContentBuffer.getCaretPosition();
        int length = endIndex - startIndex;
        if (length == 0) {
        	length = 1;
        }
        
    }

    @Override
    public void execute() {
    }
    
    /**
     * Get the indentation of the line previous to the one the caret is currently on in tabContentBuffer
     * @return number of spaces to indent on the new line
     */
    private int getLastLineIndentation(TabContentTextBuffer tabContentBuffer){
        int count = 0;
        try {
            int lastLineIndex = tabContentBuffer.getLineOfOffset( tabContentBuffer.getCaretPosition() )-1;
            int lastLineStart = tabContentBuffer.getLineStartOffset( lastLineIndex );
            int lastLineLength = tabContentBuffer.getLineEndOffset( lastLineIndex ) - lastLineStart;
            String lastLine = tabContentBuffer.getText( lastLineStart , lastLineLength );
            for(count = 0;count < lastLine.toCharArray().length;count++){
                if(lastLine.toCharArray()[count] != ' '){
                    break;
                }
            }
            int openTags = 0;
            for(String s : lastLine.split( "<" )){
                if(s.contains( ">" ) && !s.contains( "br>") && !s.trim().matches( "img\\ssrc=\".*" )){
                    if(!s.startsWith( "/" )){
                        openTags++;
                    }else{openTags--;}
                    openTags = StaticUtilities.antiNegativeOne( openTags );
                }
            }
            if(openTags > 0){count += StaticUtilities.getTabSpaces();}
        } catch (BadLocationException e1) {}
        return count;
    }

}
