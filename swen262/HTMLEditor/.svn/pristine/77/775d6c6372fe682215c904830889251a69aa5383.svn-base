package command;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.text.BadLocationException;

import tab.TabContentTextBuffer;
import main.StaticUtilities;

public class KeyPressedCommand implements CommandInterface, KeyListener {

    /**
     * Tab Buffer that will be observed for key inputs
     */
    private TabContentTextBuffer tabContentBuffer;
    
    /**
     * Observes a tab buffer to look for specific key inputs
     * @param tabContentBuffer = tab buffer to observe
     * */
    public KeyPressedCommand(TabContentTextBuffer tabContentBuffer){
        this.tabContentBuffer = tabContentBuffer;
    }
    
    @Override
    public void keyPressed(KeyEvent e) {}

    @Override
    public void keyReleased(KeyEvent e) {
    	
    }

    @Override
    public void keyTyped(KeyEvent e) {
    	
    	//***************************************************//
    	//make undo object and add type of text to it
    	ActionObject undoObj = new ActionObject();
    	undoObj.setType(StaticUtilities.getTextEntry());
    	int startIndex = tabContentBuffer.getCaretPosition();
    	int endIndex;
    	///////////////////////////////////////////////////////////
    	
    	
    	
        if(e.getKeyChar() == '\t'){
            //If tab key is hit
            try{
            	
            	
            	
            	//*********************************************************//
            	// put TAB key data into undoObject and add to stack
                undoObj.setData(e.toString());
                StaticUtilities.getCurrentTab().getUndoBuffer().addToUndoStack(undoObj);
            	//System.out.println(undoObj.getData());
                //////////////////////////////////////////////////////////////////
                
                
                
                //Removed inserted tab character
                tabContentBuffer.getDocument().remove( tabContentBuffer.getCaretPosition() - 1 , 1 );
                //Insert tab spaces
                //TODO Add custom number of spaces for tab
                tabContentBuffer.insert( StaticUtilities.getTab() ,tabContentBuffer.getCaretPosition());
            }catch (BadLocationException e2){}
        }else if (e.getKeyChar() == '\n' && StaticUtilities.getAutoIndent()){
            //If enter key is hit
            //Auto Indent
            tabContentBuffer.insert(StaticUtilities.spaces( getLastLineIndentation() ),tabContentBuffer.getCaretPosition());
            
        }
        
        
        
        //********************************************************************************//
        //set length of modified data, define position to place data when action completed
        endIndex = tabContentBuffer.getCaretPosition();
        int length = endIndex - startIndex;
        if (length == 0) {
        	length = 1;
        }
        undoObj.setLength(length);
        undoObj.setPosition(tabContentBuffer.getCaretPosition());
        System.out.println(undoObj.getLength()); //prints 1 or the index on the line, when entering newline
        ///////////////////////////////////////////////////////////////////////////////////////
        
    }

    @Override
    public void execute() {
    }
    
    /**
     * Get the indentation of the line previous to the one the caret is currently on in tabContentBuffer
     * @return number of spaces to indent on the new line
     */
    private int getLastLineIndentation(){
        int count = 0;
        try {
            int lastLineIndex = tabContentBuffer.getLineOfOffset( tabContentBuffer.getCaretPosition() )-1;
            int lastLineStart = tabContentBuffer.getLineStartOffset( lastLineIndex );
            int lastLineLength = tabContentBuffer.getLineEndOffset( lastLineIndex ) - lastLineStart;
            String lastLine = tabContentBuffer.getText( lastLineStart , lastLineLength );
            for(count = 0;count < lastLine.toCharArray().length;count++){
                if(lastLine.toCharArray()[count] != ' '){
                    break;
                }
            }
            int openTags = 0;
            for(String s : lastLine.split( "<" )){
                if(s.contains( ">" ) && !s.contains( "br>") && !s.trim().matches( "img\\ssrc=\".*" )){
                    if(!s.startsWith( "/" )){
                        openTags++;
                    }else{openTags--;}
                    openTags = StaticUtilities.antiNegativeOne( openTags );
                }
            }
            if(openTags > 0){count += StaticUtilities.getTabSpaces();}
        } catch (BadLocationException e1) {}
        return count;
    }

}
