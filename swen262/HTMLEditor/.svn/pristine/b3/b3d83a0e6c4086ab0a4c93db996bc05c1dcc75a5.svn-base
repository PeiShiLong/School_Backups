package main;

import static java.awt.event.InputEvent.CTRL_DOWN_MASK;
import static java.awt.event.InputEvent.SHIFT_DOWN_MASK;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.KeyStroke;

import Command.ExitCommand;
import Command.OpenCommand;
import Command.SaveAsCommand;
import Command.SaveCommand;
import Command.UpdateAutoIndentCommand;
import Command.UpdateLineWrapCommand;
import Command.UpdateTabSizeCommand;
import Command.UpdateWrapOnWordCommand;
import Tab.TabPanel;

/**
 * Display is the view of the Editor. It is responsible
 * for the skeleton swing components the compose the entire
 * editor. It also houses the TabPanel (controller of tabs) and
 * the concrete command (OpenCommand). 
 *
 * Display also creates the menu bar with menu options that act as
 * the invokers to a series of concrete commands.
 * 
 * Note: Display is a Singleton
 */
public class Display extends JFrame{
	
	//initialize the singleton to null
	public static Display display = null;
	
	
 
	//houses the tab controller and OpenCommand
	private TabPanel tabs;
	private OpenCommand fileOpener;
	
	//implements the singleton pattern
	protected Display(){}
	public static Display getDisplay(){
		if(display == null){
			display = new Display();
			display.init();
		}
		return display;
	}
	
	/**
	 * intiailizes the Display (JFrame)
	 */
	public void init(){
	    setTitle("HTML Editor");
        setSize(750, 750);
		tabs = new TabPanel();
		this.add( tabs );
		createMenuBar();
	}
	
	/**
	 * getTabPanel is a getter method for the Display's
	 * TabPanel object
	 * @return TabPanel
	 */
	public TabPanel getTabPanel(){
        return this.tabs;
    }
	
	/**
	 * getFileOpener is a getter method for the Display's
	 * concrete OpenCommand
	 * @return fileOpener
	 */
	public OpenCommand getFileOpener(){
	    return fileOpener;
	}

	/**
	 * createMenuBar creates the Display's menu bar with menu options
	 * that house accelerator keys and action listeners. These action listeners
	 * act as the invoker to concrete commands like the SaveCommand, OpenCommand,
	 * SaveAsCommand, and ExitCommand.
	 */
	private void createMenuBar(){
		JMenuBar menu = new JMenuBar();
		JMenu file = new JMenu("File");
		JMenu insert = new JMenu("Insert");
		JMenu preferences = new JMenu("Preferences");
		JMenuItem open = new JMenuItem("Open");
		JMenuItem save = new JMenuItem("Save");
		JMenuItem saveAs = new JMenuItem("Save As...");
		JMenuItem exit = new JMenuItem("Exit");
		MenuItemOption lineWrap = new MenuItemOption("Line Wrap", StaticUtilities.offImage);
		MenuItemOption wrapOnWord = new MenuItemOption("Wrap On Word",StaticUtilities.offImage);
		MenuItemOption autoIndent = new MenuItemOption("Auto Indent",StaticUtilities.onImage);
		JMenuItem tabSize = new JMenuItem("Tab Size...");
		
		
		//short-cut keys
		exit.setAccelerator(KeyStroke.getKeyStroke('E', CTRL_DOWN_MASK));
		open.setAccelerator(KeyStroke.getKeyStroke('O', CTRL_DOWN_MASK));
		save.setAccelerator(KeyStroke.getKeyStroke('S', CTRL_DOWN_MASK));
		saveAs.setAccelerator( KeyStroke.getKeyStroke('S', SHIFT_DOWN_MASK + CTRL_DOWN_MASK) );
		lineWrap.setAccelerator( KeyStroke.getKeyStroke('W', CTRL_DOWN_MASK) );
		wrapOnWord.setAccelerator( KeyStroke.getKeyStroke('W', SHIFT_DOWN_MASK + CTRL_DOWN_MASK) );
		autoIndent.setAccelerator( KeyStroke.getKeyStroke('A', CTRL_DOWN_MASK) );
		tabSize.setAccelerator( KeyStroke.getKeyStroke('T', CTRL_DOWN_MASK) );
		
		
		fileOpener = new OpenCommand();
		open.addActionListener(fileOpener);
		
		save.addActionListener(new SaveCommand());
		
		saveAs.addActionListener( new SaveAsCommand() );
		
		exit.addActionListener(new ExitCommand());
		
		lineWrap.addActionListener( new UpdateLineWrapCommand(lineWrap) );
		
		wrapOnWord.addActionListener( new UpdateWrapOnWordCommand(wrapOnWord) );
		
		autoIndent.addActionListener( new UpdateAutoIndentCommand( autoIndent ) );
		
		tabSize.addActionListener( new UpdateTabSizeCommand() );
		
		this.setDefaultCloseOperation( DO_NOTHING_ON_CLOSE );
		this.addWindowListener(new WindowAdapter(){
			public void windowClosing(WindowEvent e){
				new ExitCommand().execute();
			}
		});
		
		preferences.add( lineWrap);
		preferences.add( wrapOnWord);
		preferences.add( autoIndent );
		preferences.add( tabSize );
		file.add(open);
		file.add(save);
		file.add(saveAs);
		file.add(exit);
		menu.add(file);
		menu.add(insert);
		menu.add(preferences);
		setJMenuBar(menu);
	}

}