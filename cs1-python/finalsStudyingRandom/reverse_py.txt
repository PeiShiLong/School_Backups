"""
file: reverse.py
language: python3
author: A. Nunes-Harwitt
description: Solution to the string reversal problem
"""

###################
# Helper functions
###################

def strHead(s):
   """strHead: String -> String"""
   return s[0]

def strTail(s):
   """strTail: String -> String"""
   return s[1:]


##########################
# Computing string length
##########################

def length(s):
   """length: String -> Number"""
   if s == '':
       return 0
   else:
       return 1 + length(strTail(s))

# Tests
def testLength():
   print('Testing length')
   print(length('') == 0)
   print(length('a') == 1)
   print(length('ab') == 2)
   print(length('abc') == 3)
    
###############################
# Computing string in reversal
###############################

def reverse(s):
   """reverse: String -> String"""
   if s == '':
       return ''
   else:
       return reverse(strTail(s)) + strHead(s)

# Tests
def testReverse():
   print('Testing reverse')
   print(reverse('') == '')
   print(reverse('a') == 'a')
   print(reverse('ab') == 'ba')
   print(reverse('abc') == 'cba')

##############################################
# Accumulative Recursion
##############################################

######################
# Accumulative length
######################

def length2(s, a):
   """length2: String * Number -> Number """
   if s == '':
     return a
   else:
     return length2(strTail(s), a + 1)

# Tests
def testLength2():
   print('Testing length2')
   print(length2('', 5) == 5)
   print(length2('a', 5) == 6)
   print(length2('ab', 5) == 7)
   print(length2('abc', 5) == 8)


def length1(s):
   """length1: String -> Number"""
   return length2(s, 0)

# Tests
def testLength1():
   print('Testing length1')
   print(length1('') == 0)
   print(length1('a') == 1)
   print(length1('ab') == 2)
   print(length1('abc') == 3)

# Derived Iterative form

def lengthIter(s):
   """lengthIter: String -> Number"""
   a = 0
   for head in s:
     a = a + 1
   return a

# Tests
def testLengthIter():
   print('Testing lengthIter')
   print(lengthIter('') == 0)
   print(lengthIter('a') == 1)
   print(lengthIter('ab') == 2)
   print(lengthIter('abc') == 3)


#######################
# Accumulative Reverse
#######################

def reverse2(s, a):
   """reverse2: String * String -> String"""
   if s == '':
     return a
   else:
     return reverse2(strTail(s), strHead(s) + a)

# Tests
def testReverse2():
   print('Testing reverse2')
   print(reverse2('', 'xy') == 'xy')
   print(reverse2('a', 'xy') == 'axy')
   print(reverse2('ab', 'xy') == 'baxy')
   print(reverse2('abc', 'xy') == 'cbaxy')


def reverse1(s):
   """reverse1: String -> String"""
   return reverse2(s, '')

# Tests
def testReverse1():
   print('Testing reverse1')
   print(reverse1('') == '')
   print(reverse1('a') == 'a')
   print(reverse1('ab') == 'ba')
   print(reverse1('abc') == 'cba')


# Derived Iterative form

def reverseIter(s):
   """reverseIter: String -> String"""
   a = ''
   for head in s:
      a = head + a
   return a

# Tests
def testReverseIter():
   print('Testing reverseIter')
   print(reverseIter('') == '')
   print(reverseIter('a') == 'a')
   print(reverseIter('ab') == 'ba')
   print(reverseIter('abc') == 'cba')



# Run tests

testLength()
testReverse()
testLength2()
testLength1()
testLengthIter()
testReverse2()
testReverse1()
testReverseIter()
